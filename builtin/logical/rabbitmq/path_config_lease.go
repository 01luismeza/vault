package rabbitmq

import (
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/vault/logical"
	"github.com/hashicorp/vault/logical/framework"
)

const (
	leaseLabel        = "ttl"
	leaseMaxLabel     = "ttl_max"
	leasePatternLabel = "config/" + leaseLabel
)

func configFields() map[string]*framework.FieldSchema {
	return map[string]*framework.FieldSchema{
		leaseLabel: &framework.FieldSchema{
			Type:        framework.TypeDurationSecond,
			Description: "Default " + leaseLabel + " for roles.",
		},

		leaseMaxLabel: &framework.FieldSchema{
			Type:        framework.TypeDurationSecond,
			Description: "Maximum time a credential is valid for.",
		},
	}
}

func pathConfigLease(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: leasePatternLabel,
		Fields:  configFields(),

		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.ReadOperation:   b.pathLeaseRead,
			logical.UpdateOperation: b.pathLeaseUpdate,
		},

		HelpSynopsis:    pathConfigLeaseHelpSyn,
		HelpDescription: pathConfigLeaseHelpDesc,
	}
}

func (b *backend) pathLeaseUpdate(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	lease, leaseMax, err := validateLeases(d)
	if err != nil {
		return nil, err
	}

	// Store it
	entry, err := logical.StorageEntryJSON(leasePatternLabel, &configLease{
		Lease:    lease,
		LeaseMax: leaseMax,
	})
	if err != nil {
		return nil, err
	}
	if err := req.Storage.Put(entry); err != nil {
		return nil, err
	}

	return nil, nil
}

func (b *backend) pathLeaseRead(
	req *logical.Request, data *framework.FieldData) (*logical.Response, error) {
	lease, err := b.Lease(req.Storage)

	if err != nil {
		return nil, err
	}
	if lease == nil {
		return nil, nil
	}

	return &logical.Response{
		Data: map[string]interface{}{
			leaseLabel:    lease.Lease.String(),
			leaseMaxLabel: lease.LeaseMax.String(),
		},
	}, nil
}

type configLease struct {
	Lease    time.Duration
	LeaseMax time.Duration
}

func validateLeases(data *framework.FieldData) (lease, leaseMax time.Duration, err error) {

	leaseRaw := data.Get(leaseLabel).(int)
	leaseMaxRaw := data.Get(leaseMaxLabel).(int)

	if leaseRaw == 0 && leaseMaxRaw == 0 {
		err = errors.New(leaseLabel + " or " + leaseMaxLabel + " must have a value")
		return
	}

	return time.Duration(leaseRaw) * time.Second, time.Duration(leaseMaxRaw) * time.Second, nil
}

var pathConfigLeaseHelpSyn = fmt.Sprintf(`
Configure the default %s information for generated credentials.
`, leaseLabel)

var pathConfigLeaseHelpDesc = fmt.Sprintf(`
This configures the default %s information used for credentials
generated by this backend. The %s specifies the duration that a
credential will be valid for, as well as the maximum session for
a set of credentials.

The format for the %s is "1h" or integer and then unit. The longest
unit is hour.
`, leaseLabel, leaseLabel, leaseLabel)
