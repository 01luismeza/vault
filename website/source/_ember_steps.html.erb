<script type="text/x-handlebars" data-template-name="welcome">
    <p>
    <strong>Welcome to the Vault interactive demo!</strong>
    </p>
    <p>
    This will cover:
    </p>
    <ul>
        <li>- Unsealing your Vault</li>
        <li>- Authorizing your requests to Vault</li>
        <li>- Mounting a backend</li>
        <li>- Reading, writing and deleting secrets</li>
        <li>- Sealing your Vault</li>
    </ul>
    <p>
    <strong>Use the command "next" to move foward</strong>. This will work throughout
    the tutorial, along with "previous".
    </p>
</script>

<script type="text/x-handlebars" data-template-name="init">
    <p>
    Upon opening this terminal, you connected to a real in-memory Vault server.
    Any commands you send across will work as with Vault normally, but closing this page
    will end the session.
    </p>
    <p>
    Please note that this is running in a shared environment, so avoid setting any real secrets.
    </p>
</script>



<script type="text/x-handlebars" data-template-name="unseal">
    <p>
        <strong>{{model.humanName}}</strong>
    </p>
    <p>
        Now we need to unseal the Vault that you have just initialized.
    </p>
    <p>
        When a Vault server is started, it starts in a sealed state.
         In this state, Vault is configured to know where and how to access the
         physical storage, but doesn't know how to decrypt any of it.
    </p>
    <p>
        Vault encrypts data with an encryption key. This key is also encrypted (but
        not stored) and is called the "master key".
    </p>
    <p>
        Decryting the master key requires a threshold of shards. In this example,
        we use one shard to decrypt this master key, but you can use any number and
        disribute shards to any number of operators.
    </p>
    <p>
        Send the unseal key to Vault with "vault unseal &lt;key&gt;".
    </p>
</script>
